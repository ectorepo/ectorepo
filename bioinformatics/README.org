#+TITLE:     Ectorepo: Bioinformatics
#+AUTHOR:    David Conner
#+EMAIL:     aionfork@gmail.com
#+DESCRIPTION: notes

The wikipathways organization has a lot of fairly advanced data science tools:

+ OWL & RDF, Sparql
+ processing pipelines using many different languages
+ documented procedures for learning and getting data/analysis approved
+ good CI/CD tooling for builds/etc

**** TODO decide on repositories to exclude

Some of these are massive -- wikipathways/wikipathways-assets is 4 GB

* Params

nrepos

#+name: nrepos
#+begin_src emacs-lisp
50
#+end_src

#+RESULTS: nrepos
: 50

avoid confirmations

#+begin_src emacs-lisp
(setq-local org-confirm-babel-evaluate nil)
#+end_src

#+RESULTS:

Check rates:

#+begin_src emacs-lisp :results value code :exports code
(ghub-graphql-rate-limit)
#+end_src

* Wiki Pathways

These repos are excluded

#+NAME: wikipathwaysReposExclude
| |

Collect  Wiki Pathways repositories

#+name: wikipathwaysRepos
#+begin_src emacs-lisp :var nrepos=50 :results replace vector value :exports code :noweb yes
(ghub-graphql
 (graphql-query ((organization
                  :arguments ((login . "wikipathways"))
                  (repositories
                   :arguments ((first . <<nrepos()>>)
                               (orderBy . ((field . UPDATED_AT)
                                           (direction . DESC))))
                   (edges
                    (node (owner login)
                          name
                          (defaultBranchRef prefix name)
                          url
                          updatedAt
                          isArchived)))))))
#+end_src

Filter the results, generate XML.

#+name: wikipathwaysReposXML
#+begin_src emacs-lisp :var gqldata=wikipathwaysRepos repos-exclude=wikipathwaysReposExclude :results value html
(setq -gql-data gqldata)

;; no repos-core variable
;; (repos-core (flatten-list repos-core))

(let* ((repos-exclude (flatten-list repos-exclude)))
  (thread-first
    (thread-last
      (a-get* (nthcdr 0 gqldata) 'data 'organization 'repositories 'edges)
      (mapcar (lambda (el) (a-get* el 'node)))

      ;; filter archived repos
      (seq-filter (lambda (el) (not (a-get* el 'isArchived))))

      ;; filter repos in reposExclude list
      (seq-filter (lambda (el) (not (member (a-get* el 'name) repos-exclude))))
      (mapcar (lambda (el)
                (let* ((raw-name (a-get* el 'name))

                       ;; (repo-core? (member raw-name repos-core))

                       (path-dirs (list "wpw" raw-name))

                       ;; (path-dirs (cond (repo-core? (list "core" raw-name))
                       ;;                 (t (list "misc" raw-name))))

                       (path (string-join path-dirs "/"))
                       (ref (concat (a-get* el 'defaultBranchRef 'prefix)
                                    (a-get* el 'defaultBranchRef 'name)))
                       (name (string-join (list (a-get* el 'owner 'login)
                                                (a-get* el 'name)) "/")))
                  (concat "<project"
                          " name=\"" name
                          "\" path=\"" path
                          "\" revision=\"" ref "\" remote=\"github\"/>")))))
    (cl-sort 'string-lessp :key 'downcase)
    (string-join "\n")))
#+end_src

*** Generate WikiPathways XML

#+begin_src xml :tangle wikipathways.xml :noweb yes
<?xml version="1.0" encoding="utf-8"?>
<manifest>
  <<wikipathwaysReposXML()>>
</manifest>
#+end_src
