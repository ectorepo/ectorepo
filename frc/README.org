#+title:     Ectorepo: FRC
#+author:    David Conner
#+email:     noreply@te.xel.io
#+PROPERTY: header-args :comments none

A list of repositories related to the FRC robotics competitions.

When using =repo init -u $url -m $manifest= instead of the git submodule to
checkout, the filepaths for =<include name=mnfst.xml/>= are relative to the root
repository.

#+begin_src xml :tangle default.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest>
  <include name="_remotes.xml"/>
  <default remote="github" sync-j="8" revision="refs/heads/master"/>
  <include name="frc/wpilibsuite.xml"/>
  <include name="frc/robotpy.xml"/>
  <include name="frc/frcmisc.xml"/>
</manifest>
#+end_src

Check rates:

#+begin_src emacs-lisp :results value code :exports code
(ghub-graphql-rate-limit)
#+end_src

To avoid confirmations

#+begin_src emacs-lisp
(setq-local org-confirm-babel-evaluate nil)
#+end_src

* Setup

#+name: nrepos
#+begin_src emacs-lisp
100
#+end_src

#+RESULTS: nrepos
: 100

*  Core

* Misc

The paths for the repositories here will change as I become more familiar with
the FRC ecosystem.


Generate =wpilibsuite.xml=

#+begin_src xml :tangle frcmisc.xml :noweb yes
<?xml version="1.0" encoding="utf-8"?>
<manifest>
  <!-- texts -->
  <project name="krishauser/RoboticSystemsBook" path="text/RoboticSystemsBook" revision="refs/heads/master" remote="github"/>
  <project name="krishauser/Klampt" path="text/Klampt" revision="refs/heads/master" remote="github"/>
  <project name="krishauser/Klampt-jupyter-extension" path="text/Klampt-jupyter-extension" revision="refs/heads/master" remote="github"/>
  <!-- third party dashboards -->
  <project name="binex-dsk/QFRCDashboard" path="dash/QFRCDashboard" revision="refs/heads/master" remote="github"/>
  <project name="Gold872/elastic-dashboard" path="dash/elastic-dashboard" revision="refs/heads/main" remote="github"/>
  <project name="frc-web-components/frc-web-components" path="dash/frc-web-components" revision="refs/heads/master" remote="github"/>
  <!-- Gradle Builds for other languages -->
  <project name="glinia/3501-spark" path="clj/3501-spark" revision="refs/heads/master"/>
  <project name="glinia/3501-spark-clojure" path="clj/3501-spark-clojure" revision="refs/heads/master"/>
  <!-- PhotonVision -->
  <project name="" path="" revision=""/>
</manifest>
#+end_src

* WPI Lib

Get about 60 of the =wpilibsuite= repositories. These should go into
=/data/ecto/frc/wpilibsuite=.

#+name: wpi-repos
#+begin_src emacs-lisp :var nrepos=60 :results replace vector value :exports code :noweb yes
(ghub-graphql
 (graphql-query ((organization
                  :arguments ((login . "wpilibsuite"))
                  (repositories
                   :arguments ((first . <<nrepos()>>)
                               (orderBy . ((field . UPDATED_AT)
                                           (direction . DESC))))
                   (edges
                    (node (owner login)
                          name
                          (defaultBranchRef prefix name)
                          url
                          updatedAt
                          isArchived)))))))
#+end_src

Filter the results, generate XML

#+name: wpilibsuite
#+begin_src emacs-lisp :var gqldata=wpi-repos :results value html
(thread-first
  (thread-last
    (a-get* (nthcdr 0 gqldata) 'data 'organization 'repositories 'edges)
    (mapcar (lambda (el) (a-get* el 'node)))
    (seq-filter (lambda (el) (not (a-get* el 'isArchived))))
    (mapcar (lambda (el)
              (let* (;; (defaultBranchRef (a-get* 'defaultBranchRef))
                     (path (a-get* el 'name))
                     (ref (concat (a-get* el 'defaultBranchRef 'prefix)
                                  (a-get* el 'defaultBranchRef 'name)))
                     (name (string-join (list (a-get* el 'owner 'login)
                                              (a-get* el 'name)) "/")))
                (concat "<project"
                        " name=\"" name
                        "\" path=\"wpilibsuite/" path
                        "\" revision=\"" ref "\" remote=\"github\"/>")))))
  (cl-sort 'string-lessp :key 'downcase)
  (string-join "\n"))
#+end_src

Generate =wpilibsuite.xml=

#+begin_src xml :tangle wpilibsuite.xml :noweb yes
<?xml version="1.0" encoding="utf-8"?>
<manifest>
  <<wpilibsuite()>>
</manifest>
#+end_src

* Robotpy


Get about 60 of the =robotpy= repositories. These should go into
=/data/ecto/frc/robotpy=.

#+name: robotpy-repos
#+begin_src emacs-lisp :var nrepos=60 :results replace vector value :exports code :noweb yes
(ghub-graphql
 (graphql-query ((organization
                  :arguments ((login . "robotpy"))
                  (repositories
                   :arguments ((first . <<nrepos()>>)
                               (orderBy . ((field . UPDATED_AT)
                                           (direction . DESC))))
                   (edges
                    (node (owner login)
                          name
                          (defaultBranchRef prefix name)
                          url
                          updatedAt
                          isArchived)))))))
#+end_src

Filter the results, generate XML

#+name: robotpy
#+begin_src emacs-lisp :var gqldata=robotpy-repos :results value html
(thread-first
  (thread-last
    (a-get* (nthcdr 0 gqldata) 'data 'organization 'repositories 'edges)
    (mapcar (lambda (el) (a-get* el 'node)))
    (seq-filter (lambda (el) (not (a-get* el 'isArchived))))
    (mapcar (lambda (el)
              (let* (;; (defaultBranchRef (a-get* 'defaultBranchRef))
                     (path (a-get* el 'name))
                     (ref (concat (a-get* el 'defaultBranchRef 'prefix)
                                  (a-get* el 'defaultBranchRef 'name)))
                     (name (string-join (list (a-get* el 'owner 'login)
                                              (a-get* el 'name)) "/")))
                (concat "<project"
                        " name=\"" name
                        "\" path=\"robotpy/" path
                        "\" revision=\"" ref "\" remote=\"github\"/>")))))
  (cl-sort 'string-lessp :key 'downcase)
  (string-join "\n"))
#+end_src

Generate =robotpy.xml=

#+begin_src xml :tangle robotpy.xml :noweb yes
<?xml version="1.0" encoding="utf-8"?>
<manifest>
  <<robotpy()>>
</manifest>
#+end_src
