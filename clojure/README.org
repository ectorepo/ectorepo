* Tasks
** TODO clean up or move to org-roam

* Arch

** Install

These packages may conflict with the guix install later

+ clojure
+ clj-kondo 

Maybe:

+ clojure-query-bin :: like jq
+ grape-bin :: grep for clojure code
+ lumo-git :: cross-platform standalone Clojure REPL
+ neil :: babashka-based CLI for adding aliases/etc to deps.edn projects

* Guix

** Packages

#+name: clojure-references-guix
#+begin_src sh :results output file :file img/clojure-references-guix.svg
guix graph --type=reverse-bag clojure | dot -Tsvg
#+end_src

#+attr_html: :width 80% 
#+attr_org: :width 
#+RESULTS:
[[file:img/clojure-references-guix.svg]]

** Manifest

#+begin_src scheme :tangle manifest.scm
(use-modules (guix packages)
             (guix transformations)
             (gnu packages clojure)
             ;; (ellipsis packages clojure)
             )

;; ;; the main difference for clojure-ellipsis is that it's built using
;; ;; [tools.namespace "1.4.5"] and [tools.reader "1.3.7"]
;; (define upgrade-clojure-deps
;;   ;; p-i-r/spec doesn't operate by identity
;;   ;; (package-input-rewriting/spec `(("clojure" . ,(const clojure-ellipsis))))
;;   (package-input-rewriting `((,clojure . ,clojure-ellipsis))))

(packages->manifest
 (map identity ;; upgrade-clojure-deps
      ;; deps for clojure-tools
      (list
            clojure-tools-deps-alpha
            ;; clojure-tools
            clojure-tools-cli
            clojure-data-xml
            clojure-data-codec
            clojure-test-check
            clojure-tools-gitlibs

            ;; algo-monads
            clojure-algo-monads
            clojure-tools-macro

            ;; no deps
            clojure-algo-generic
            clojure-core-match
            clojure-instaparse
            clojure-data-csv)))
#+end_src

*** Sonotype Version Conflict

Getting this error:

#+begin_example log
guix package: error: profile contains conflicting entries for java-sonatype-oss-parent-pom
guix package: error:   first entry: java-sonatype-oss-parent-pom@7 /gnu/store/chfj46xwy1li3ksmbn676wizfm9lv5r4-java-sonatype-oss-parent-pom-7
guix package: error:    ... propagated from java-guava-parent-pom@20.0
guix package: error:    ... propagated from java-guava@20.0
guix package: error:    ... propagated from java-guice@4.1
guix package: error:    ... propagated from java-eclipse-sisu-inject@0.3.5
guix package: error:    ... propagated from maven-resolver-impl@1.6.3
guix package: error:    ... propagated from clojure-tools-deps-alpha@0.14.1212
guix package: error:   second entry: java-sonatype-oss-parent-pom@9 /gnu/store/i1kfzi4pghjkj9sdhwrjgsnydk15isri-java-sonatype-oss-parent-pom-9
guix package: error:    ... propagated from java-sisu-plexus-parent-pom@0.3.5
guix package: error:    ... propagated from java-eclipse-sisu-plexus@0.3.5
guix package: error:    ... propagated from maven-core@3.8.6
guix package: error:    ... propagated from clojure-tools-deps-alpha@0.14.1212
hint: You cannot have two different versions or variants of `clojure-tools-deps-alpha' in the same profile.
#+end_example

Running into java-sonotype-oss-parent-pom conflict (v7 & v9)



#+name: clojure-tools-graph
#+begin_src sh :results output file :file img/clojure-deps-references-guix.svg
     # --with-input=clojure=clojure-ellipsis \
guix graph -L $HOME/.dotfiles \
     clojure-tools-deps-alpha 2>/dev/null \
    | dot -Tsvg 
# guix graph -L . --type=reverse-bag -e
#+end_src

Full graph

#+name: clojure-tools-graph-full
#+begin_src sh :results output file :file img/clojure-deps-references-guix.svg
guix graph -L $HOME/.dotfiles \
     --with-input=clojure=clojure-ellipsis \
     clojure-tools-deps-alpha 2>/dev/null \
    | dot -Tsvg 
# guix graph -L . --type=reverse-bag -e
#+end_src


* @@
Call pir/spec procedure on this pkg


;;(define pir/rw (@@ (guix transformations) package-input-rewriting))


#+name: clj-deps-scheme-prog2
#+begin_example scheme
(((@@ (guix transformations) package-input-rewriting)
  (list (@@ (gnu packages clojure) clojure)
  . (@@ (ellipsis packages clojure) clojure-ellipsis)))
  (@@ (gnu packages clojure) clojure-tools-deps-alpha))
#+end_example


#+name: clj-deps-scheme-prog
#+begin_example scheme
(((@@ (guix transformations) package-input-rewriting)
  (list (@@ (gnu packages clojure) clojure)
  . (@@ (ellipsis packages clojure) clojure-ellipsis)))
  (@@ (gnu packages clojure) clojure-tools-deps-alpha))
#+end_example



(gnu packages clojure)
(guix transformations) 
(@@ (guix-transformations)clojure-tools-deps-alpha)


(@ (gnu packages clojure)  (ellipsis packages clojure) clojure-tools-deps-alpha)

(@@ (gnu packages clojure)
    (ellipsis packages clojure)
((package-input-rewriting `((,clojure . clojure-ellipsis))) clojure-tools-deps-alpha))


(@@ (gnu packages clojure)
    (ellipsis packages clojure)
(map (package-input-rewriting `((,clojure . clojure-ellipsis)))
 (list clojure-tools-deps-alpha)))


#+name: clj-deps-scheme-prog3
#+begin_example scheme
(@@ (gnu packages clojure) clojure)
#+end_example




 
#+name: clojure-tools-references-guix
#+headers: :var scheme_prog=clj-deps-scheme-prog :dir (expand-file-name ".dotfiles" (getenv "HOME"))
#+begin_src sh :results output file :file img/clojure-deps-references-guix.svg
# :results output verbatim
# 
# echo $scheme_prog
# guix graph -L . --type=reverse-bag -e "$(echo "$scheme_prog")" # 2>/dev/null | dot -Tsvg 
# guix graph -L . --type=reverse-bag -e
#+end_src

#+RESULTS: clojure-tools-references-guix
[[file:../../../home/dc/.dotfiles/img/clojure-deps-references-guix.svg]]
