#+TITLE:     Ectorepo: Open Config
#+AUTHOR:    David Conner
#+EMAIL:     aionfork@gmail.com
#+DESCRIPTION: notes
#+PROPERTY: header-args :comments none

I'm hoping that OpenConfig will give me some good ideas for how to model data
structures for network automation.


* Notes

** Protobufs

The openconfig project contains a lot of Go code that's autogenerated from
protobuf specs.

*** [[https://github.com/openconfig/kne][openconfig/kne]]

Models for KNE internals [[https://github.com/openconfig/kne/tree/main/proto][proto/*.proto]]

*** [[https://github.com/openconfig/lemming/tree/main/proto][openconfig/lemming]]

This is a reference implementation for an OpenConfig device, which is modelled
with protos below.

+ The =sai= and =packetio= namespaces seem fairly self-contained. i.e. there are
  no references to the strings =sai= or =packetio= in each other, nor in the
  separate =./proto= directory. At most this basically confirms there are no
  import statements with those strings.

**** External Aspects of Systems

These model the external aspects of systems.

+ proto/dataplane/*.proto :: OCInterface, GUE, NextHop, Route, etc
+ proto/forwarding/*.proto :: Data models for forwarding actions
+ proto/sysrib/*.proto :: idk, but it mentions Zebra (FRR)

**** System Internals

And these model the internals of devices on the dataplane (I think, maybe
over-generalizing since it's within dataplane)

+ dataplane/proto/packetio/packetio.proto :: representation of packet
+ dataplane/proto/sai/*.proto :: many different generic types you'd find in an
  network operating system (buffer, queue, schedular, port, neighbor, etc)

|---------+----------------------+-----------------+-----------+------------------+-----------------+----------------|
| acl     | debug_counter        | ipmc_group      | mcast_fdb | next_hop_group   | rpf_group       | system_port    |
| bfd     | dtel                 | ipsec           | mirror    | policer          | samplepacket    | tam            |
| bmtor   | fdb                  | isolation_group | mpls      | port             | scheduler       | tunnel         |
| bridge  | generic_programmable | l2mc            | my_mac    | qos_map          | scheduler_group | udf            |
| buffer  | hash                 | l2mc_group      | nat       | queue            | srv6            | virtual_router |
| common  | hostif               | lag             | neighbor  | route            | stp             | vlan           |
| counter | ipmc                 | macsec          | next_hop  | router_interface | switch          | wred           |
|---------+----------------------+-----------------+-----------+------------------+-----------------+----------------|

**** Diagrams

* Params

nrepos

#+name: nrepos
#+begin_src emacs-lisp
50
#+end_src

avoid confirmations


#+begin_src emacs-lisp
(setq-local org-confirm-babel-evaluate nil)
#+end_src


* Open Config Repos

These repos are excluded

#+NAME: ocReposExclude
|   |

Collect the OpenConfig org's repositories

#+name: ocRepos
#+begin_src emacs-lisp :var nrepos=50 :results replace vector value :exports code :noweb yes
(ghub-graphql
 (graphql-query ((organization
                  :arguments ((login . "openconfig"))
                  (repositories
                   :arguments ((first . <<nrepos()>>)
                               (orderBy . ((field . UPDATED_AT)
                                           (direction . DESC))))
                   (edges
                    (node (owner login)
                          name
                          (defaultBranchRef prefix name)
                          url
                          updatedAt
                          isArchived)))))))
#+end_src

Filter the results, generate XML.

#+name: ocReposXML
#+begin_src emacs-lisp :var gqldata=ocRepos repos-exclude=ocReposExclude :results value html
(setq -gql-data gqldata)

;; no repos-core variable
;; (repos-core (flatten-list repos-core))

(let* ((repos-exclude (flatten-list repos-exclude)))
  (thread-first
    (thread-last
      (a-get* (nthcdr 0 gqldata) 'data 'organization 'repositories 'edges)
      (mapcar (lambda (el) (a-get* el 'node)))
      ;; filter archived repos
      (seq-filter (lambda (el) (not (a-get* el 'isArchived))))
      ;; filter repos in reposExclude list
      (seq-filter (lambda (el) (not (member (a-get* el 'name) repos-exclude))))
      (mapcar (lambda (el)
                (let* ((raw-name (a-get* el 'name))

                       ;; (repo-core? (member raw-name repos-core))

                       (path-dirs (list "openconfig" raw-name))

                       ;; (path-dirs (cond (repo-core? (list "core" raw-name))
                       ;;                 (t (list "misc" raw-name))))

                       (path (string-join path-dirs "/"))
                       (ref (concat (a-get* el 'defaultBranchRef 'prefix)
                                    (a-get* el 'defaultBranchRef 'name)))
                       (name (string-join (list (a-get* el 'owner 'login)
                                                (a-get* el 'name)) "/")))
                  (concat "<project"
                          " name=\"" name
                          "\" path=\"" path
                          "\" revision=\"" ref "\" remote=\"github\"/>")))))
    (cl-sort 'string-lessp :key 'downcase)
    (string-join "\n")))
#+end_src

*** Generate OpenConfig XML

#+begin_src xml :tangle openconfig.xml :noweb yes
<manifest>
  <<ocReposXML()>>
</manifest>
#+end_src
