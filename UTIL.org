#+TITLE:     Ectorepo: support
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh     :tangle-mode (identity #o555) :mkdirp yes
#+PROPERTY: header-args:conf   :tangle-mode (identity #o444) :mkdirp yes
#+property: header-args:scheme :tangle-mode (identity #o644) :mkdirp yes

#+begin_src emacs-lisp :eval no :exports none :results none
;; Eval with C-x C-e to disable eval confirmation in this buffer
;; ... or set :eval yes
(setq-local org-confirm-babel-evaluate nil)
#+end_src

* Repo Tools

** Manifest

Guix environment in =manifest.scm= must be loaded by =buffer-env.el= for tangling to work.

#+begin_src scheme :tangle manifest.scm :eval no
(use-modules (guix packages)
             (gnu packages android)
             (gnu packages python))

(let ((git-repo-with-path
       (manifest-entry
         (name "git-repo")
         (item git-repo)
         (version "2.4.1") ;most recent version
         (search-paths (list (search-path-specification
                              (variable "PYTHONPATH")
                              (files '("share/git-repo")))
                             (search-path-specification
                              (variable "GUIX_PYTHONPATH")
                              (files '("share/git-repo"))))))))

 (concatenate-manifests (list
                         (manifest
                          (list git-repo-with-path))
                          (packages->manifest
                           (list python)))))
#+end_src

*** Package Transformations

See =options->transformations= for info about [[https://guix.gnu.org/manual/en/html_node/Defining-Package-Variants.html][package variants]].

#+begin_example scheme
(package
  (name "hello-simd")
  ;; ...

  ;; This package may benefit from SIMD extensions so
  ;; mark it as "tunable".
  (properties '((tunable? . #t))))
#+end_example

+ =(tunable ...)=
+ =(with-source "/file/or/url.tar.gz")=
+ or =(with-input...)=
+ or =(with-graft...)=

The last of these enables hacking on source checkouts. To use it with
=git-repo=, create a new package that inherits from the intended package and
replace the =(source...)= declaration with a reference to the project's path in
the sync'd repo superproject. There may be a be a better way to do this: =guix
build --help-transform=.

** Environment

When running the scripts, prefix them with =guix shell -m manifest.scm -- python
$script=. This is the most consistent way to do this in emacs.

The =buffer-env= package will load the correct environment when commands via
=[C-u] M-!=, but trying to get this to work with =org-babel= requires too much
init.el-specific configuration or unsatisfactory boilerplate. This is mainly an
org-babel problem.

For example, the org-babel header =:python (expand-file-name "bin/python3"
(getenv "GUIX_ENVIRONMENT"))= will give the =GUIX_ENVIRONMENT= used to start
emacs. Other ways to addess include =.env= scripts, which aren't necessarily
portable.

** Python Scripts

#+begin_src python :eval no :tangle util/test_manifest.py
import sys
import os

import manifest_xml

#+end_src

* Git
