#+TITLE:     Ectorepo: support
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh     :tangle-mode (identity #o555) :mkdirp yes
#+PROPERTY: header-args:python :tangle-mode (identity #o644) :mkdirp yes
#+PROPERTY: header-args:conf   :tangle-mode (identity #o444) :mkdirp yes
#+property: header-args:scheme :tangle-mode (identity #o644) :mkdirp yes

#+begin_src emacs-lisp :eval no :exports none :results none
;; Eval with C-x C-e to disable eval confirmation in this buffer
;; ... or set :eval yes
(setq-local org-confirm-babel-evaluate nil)
#+end_src

* Integration

** Org Notes

*** Running scripts on =$_ECTO= content from =$_REPO=

****** TODO _maybe_ use =.dir-locals.el= for setting =ectoroot= ...

+ This won't work well if this notes repository gets absorbed into
  dcunited001/zettlekasten (even as symlink. or git submodule...)
+ direnv may be confusing as well
+ probably best to avoid the refactor and use the ole =Ctrl-C, Ctrl-V= ...
  (shit) i mean ... yasnippets.

** Automation

It would be nice if some of this were automated -- e.g. identification of sqlite3
databases to facilitate generation of sqlite schema diagrams

* Analysis

*** JSON Schema

* Maintenance
** Repo Tools

*** Manifest

Guix environment in =manifest.scm= must be loaded by =buffer-env.el= for tangling to work.

#+begin_src scheme :tangle manifest.scm :eval no
(use-modules (guix packages)
             (gnu packages android)
             (gnu packages python))

(let ((git-repo-with-path
       (manifest-entry
         (name "git-repo")
         (item git-repo)
         (version "2.4.1") ;most recent version
         (search-paths (list (search-path-specification
                              (variable "PYTHONPATH")
                              (files '("share/git-repo")))
                             (search-path-specification
                              (variable "GUIX_PYTHONPATH")
                              (files '("share/git-repo"))))))))

 (concatenate-manifests (list
                         (manifest
                          (list git-repo-with-path))
                          (packages->manifest
                           (list python)))))
#+end_src

**** Package Transformations

See =options->transformations= for info about [[https://guix.gnu.org/manual/en/html_node/Defining-Package-Variants.html][package variants]].

#+begin_example scheme
(package
  (name "hello-simd")
  ;; ...

  ;; This package may benefit from SIMD extensions so
  ;; mark it as "tunable".
  (properties '((tunable? . #t))))
#+end_example

+ =(tunable ...)=
+ =(with-source "/file/or/url.tar.gz")=
+ or =(with-input...)=
+ or =(with-graft...)=

The last of these enables hacking on source checkouts. To use it with
=git-repo=, create a new package that inherits from the intended package and
replace the =(source...)= declaration with a reference to the project's path in
the sync'd repo superproject. There may be a be a better way to do this: =guix
build --help-transform=.

*** Environment

When running the scripts, prefix them with =guix shell -m manifest.scm -- python
$script=. This is the most consistent way to do this in emacs.

The =buffer-env= package will load the correct environment when commands via
=[C-u] M-!=, but trying to get this to work with =org-babel= requires too much
init.el-specific configuration or unsatisfactory boilerplate. This is mainly an
org-babel problem.

For example, the org-babel header =:python (expand-file-name "bin/python3"
(getenv "GUIX_ENVIRONMENT"))= will give the =GUIX_ENVIRONMENT= used to start
emacs. Other ways to addess include =.env= scripts, which aren't necessarily
portable.

*** Shell Scripts

Grok the general directory structure with =tree -dL 3 .= after submodules have
been modulized

**** Maintain Manifests

Now that deltas are minimal (and XML's are guaranteed to be sorted/uniq), things
like this work.

#+begin_quote
I'm probably getting rid of this this submodules approach later. it's just messy
and no one's consuming these repos.

It's also not so great when signing commits.
#+end_quote

***** Validate

Check status

#+begin_src shell
git submodule foreach "git status -s"
#+end_src

Print gitignores

#+begin_src sh
find . -name .gitignore -type f -print \
    | xargs grep --color=auto -e  '^'

    # | xargs -n1 cat # this doesn't print the filename ... idk
#+end_src

***** Manage submodules

#+begin_quote
Quite a bit of this submodule stuff is a bit unwieldy, requiring manual
intervention. The distinct content and my updates are sparse.
#+end_quote

Pull updates and try to rebase local extant commits not persistified
upstream ... and don't checkout a dangling git reference.

#+begin_src shell
git submodule update --remote --rebase
#+end_src

Map =git stash/pull/pop= across submodules

#+begin_src shell
git submodule foreach "git stash && git pull origin master && git stash pop"
#+end_src


***** Manage =_remotes.xml=

Consolidate =<remote ... />= nodes from all =_remote.xml= files and compare with the
top-level.

The red is missing from =$_REPO/_remote.xml=

#+begin_src shell :results output code :wrap example diff
cat  **/_remotes.xml | grep '<remote' | sort | uniq | diff - <(grep '<remote ' _remotes.xml)
#+end_src

#+RESULTS:
#+begin_example diff
2d1
<   <remote name="blender" fetch="https://projects.blender.org"/>
6d4
<   <remote name="elephly" fetch="https://git.elephly.net/software"/>
19d16
<   <remote name="pantherxchannel" fetch="https://channels.pantherx.org/git"/>
20a18
>   <remote name="pantherxchannel" fetch="https://channels.pantherx.org/git"/>
21a20
>   <remote name="salsa" fetch="https://salsa.debian.org"/>
27d25
<   <remote name="srht_csantosb" fetch="https://git.sr.ht/~csantosb"/>
#+end_example


****** Fan-out Copies of =_remotes.xml=

#+begin_src shell
git submodule foreach "cp ../_remotes.xml _remotes.xml"
#+end_src

Diff for lagging copies of =_remotes.xml= across submodules.

+ Diff outputs non-standard exit codes which breaks these macro commands and
  also org babel blocks.
+ The grep will only show the lines from files changed inside the submodule.
  Just a quick check... There's probably a better way with submodule tooling.

#+begin_src shell
git submodule foreach "diff ../_remotes.xml _remotes.xml ; echo ''" | grep -e '^>'
#+end_src
***** And so forth

**** Old Merge =_remotes.xml= Manifests

I'm not sure how to merge patches while dropping file source info. This just
finds and reports all lines not in the top-level manifest.

#+begin_src shell :results output
allremotes=_remotes.xml
subremotes=(*/_remotes.xml)

mergedir=$(mktemp -d)

echo $mergedir

for remote in "${subremotes[@]}";do
    remotename=$(dirname $remote)
    #echo "diff $allremotes $remote > remote.diff"
    diff $allremotes $remote > $mergedir/$remotename.xml
done

cat $mergedir/* | grep -e "^>\s*<remote" | sort | uniq | cut -b2-
#+end_src

#+RESULTS:
#+begin_example
/tmp/tmp.6eUYYdLkTz
   <remote name="framagit" fetch="https://framagit.org"/>
   <remote name="github" fetch="https://github.com"/>
   <remote name="srht_abcdw" fetch="https://git.sr.ht/~abcdw"/>
   <remote name="srht_akagi" fetch="https://git.sr.ht/~akagi"/>
   <remote name="srht_krevedkokun" fetch="https://git.sr.ht/~krevedkokun"/>
   <remote name="srht_michal_atlas" fetch="https://git.sr.ht/~michal_atlas"/>
   <remote name="srht_plattfot" fetch="https://git.sr.ht/~plattfot"/>
   <remote name="srht_sircmpwn" fetch="https://git.sr.ht/~sircmpwn"/>
   <remote name="srht_whereiseveryone" fetch="https://git.sr.ht/~whereiseveryone"/>
#+end_example

**** Commit Missing Remotes

After copying updated =_remotes.xml=

#+begin_src shell :results output

remotefile=_remotes.xml
subremotes=(*/_remotes.xml)
currentdir=$(pwd)

for remote in "${subremotes[@]}"; do
subdir=$(dirname $remote)
cd $subdir
git add $remotefile
# script will quit on first error
# git commit -m "update $remotefile"
cd $currentdir
done
#+end_src

#+RESULTS:

*** Python Scripts

When provided the above manifest, a vanilla =buffer-env= configuration, permits
hacking on the python scripts using commands like:

+ C-c C-p :: run-python
+ C-c C-c :: python-shell-send-buffer

Repo's =XmlManifest= class requires a =repodir= and =manifest_file= path. for
these scripts below, I assume that the script is running from =$_REPO= and that
the manifests are sync'd into =$_ECTO/$project=.

**** Merge Manifests

#+begin_src shell
guix shell -m manifest.scm -- python util/merge_manifests.py
#+end_src

#+RESULTS:

#+begin_src python :tangle util/merge_manifests.py  :tangle-mode (identity #o744) :mkdirp yes
import sys
import os
import glob
from os.path import join

import manifest_xml
#from manifest_xml import *
#from manifest_xml import GitcManifest
#from manifest_xml import XmlManifest, GitcManifest, GitcClient
#from manifest_xml import GitcManifest, RepoClient

ecto_dir = os.environ["_ECTO"]
repo_dir = os.environ["_REPO"]
template = join(repo_dir, "_remotes.xml")

remotes_xml_files = glob.glob("*/_remotes.xml")
repo_names = list(map(lambda p: p.split("/")[0], remotes_xml_files))
ecto_paths = list(map(lambda n: "/".join([ecto_dir,n]), repo_names))

#ecto_manifests = list(map(lambda i: GitcManifest(ecto_paths[i], remotes_xml_files[i]),
#                          range(len(remotes_xml_files))))
ecto_manifests = list(map(lambda i: RepoClient(ecto_paths[i], remotes_xml_files[i]),
                          range(len(remotes_xml_files))))

#print(ecto_manifests[0].remotes)
#repo_remote_xml = GitcManifest(".", "_remotes.xml")
#print(repo_remote_xml.remotes)
print(template)
#+end_src

#+RESULTS:

#+begin_example python

# def output_manifest(file):

# assume that the immediate subdirectories of dir may contain _remotes.xml
# collect these files into a list

# def consolidate_remotes(dir):
# os.walk

print(os.path)
print(__file__)

def main(orig_args):
    print("orig_args:",orig_args)

if __name__ == '__main__':
  main(sys.argv[1:])

#+end_example


** Repo Checkout Tools

*** Fix misbehaving checkouts

Running =repo sync= and cloning too many bundles at once ends up not updating
the =pwd= with checkouts, which makes running manual =repo sync $project= a bit
difficult.

#+name: superproject
#+begin_src emacs-lisp :results replace value
"tensorflow"
#+end_src

#+name: superinclude
#+begin_src emacs-lisp :results replace value
"tensorflow_core.xml"
#+end_src

#+name: projects
#+header:  :var superproject=superproject superinclude=superinclude
#+begin_src sh :results replace output
grep -e '<project' $_REPO/$superproject/$superinclude | sed -E 's/^.*path="(.*)" ref=".*$/\1/'
#+end_src

#+RESULTS: projects
#+begin_example
.allstar
adanet
addons
agents
benchmarks
build
cloud
codelabs
community
compression
custom-op
data-validation
datasets
decision-forests
deepmath
docs
docs-l10n
dtensor-gcp-examples
ecosystem
embedding-projector-standalone
estimator
examples
fairness-indicators
federated
fold
gan
gnn
graphics
haskell
hub
io
java
java-models
java-ndarray
kfac
lattice
lingvo
lucid
mesh
metadata
mlir-hlo
model-analysis
model-card-toolkit
model-optimization
model-remediation
models
networking
neural-structured-learning
nmt
oss-fuzz
playground
privacy
probability
profiler
profiler-ui
quantum
ranking
recommenders
recommenders-addons
runtime
rust
serving
sig-tfjs
similarity
swift-apis
tcav
tensor2tensor
tensorboard
tensorflow
tensorrt
text
tf-build-actions
tfhub.dev
tfjs
tfjs-examples
tfjs-models
tfjs-website
tfjs-wechat
tflite-micro
tflite-micro-arduino-examples
tflite-support
tfx
tfx-addons
tfx-bsl
toolchains
tpu
transform
#+end_example

#+begin_src

#+end_src


** Git
