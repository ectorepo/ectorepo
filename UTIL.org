#+TITLE:     Ectorepo: support
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh     :tangle-mode (identity #o555) :mkdirp yes
#+PROPERTY: header-args:conf   :tangle-mode (identity #o444) :mkdirp yes
#+property: header-args:scheme :tangle-mode (identity #o644) :mkdirp yes

#+begin_src emacs-lisp :eval no :exports none :results none
;; Eval with C-x C-e to disable eval confirmation in this buffer
;; ... or set :eval yes
(setq-local org-confirm-babel-evaluate nil)
#+end_src

* Repo Tools

** Manifest

Guix environment in =manifest.scm= must be loaded by =buffer-env.el= for tangling to work.

#+begin_src scheme :tangle manifest.scm :eval no
(use-modules (guix packages)
             (gnu packages android)
             (gnu packages python))

(let ((git-repo-with-path
       (manifest-entry
         (name "git-repo")
         (item git-repo)
         (version "2.4.1") ;most recent version
         (search-paths (list (search-path-specification
                              (variable "PYTHONPATH")
                              (files '("share/git-repo")))
                             (search-path-specification
                              (variable "GUIX_PYTHONPATH")
                              (files '("share/git-repo"))))))))

 (concatenate-manifests (list
                         (manifest
                          (list git-repo-with-path))
                          (packages->manifest
                           (list python)))))
#+end_src

*** Package Transformations

See =options->transformations= for info about [[https://guix.gnu.org/manual/en/html_node/Defining-Package-Variants.html][package variants]].

#+begin_example scheme
(package
  (name "hello-simd")
  ;; ...

  ;; This package may benefit from SIMD extensions so
  ;; mark it as "tunable".
  (properties '((tunable? . #t))))
#+end_example

+ =(tunable ...)=
+ =(with-source "/file/or/url.tar.gz")=
+ or =(with-input...)=
+ or =(with-graft...)=

The last of these enables hacking on source checkouts. To use it with
=git-repo=, create a new package that inherits from the intended package and
replace the =(source...)= declaration with a reference to the project's path in
the sync'd repo superproject. There may be a be a better way to do this: =guix
build --help-transform=.

** Environment

#+name: guix-environment
#+begin_src emacs-lisp :eval yes :results value :exports both
(getenv "GUIX_ENVIRONMENT")
#+end_src

#+RESULTS: guix-environment
: /gnu/store/jgjvk91gfl2b92dafm6ww7bs8vk3y2y1-profile

#+name: repo-lib
#+begin_src emacs-lisp :eval yes  :results value :exports both
(file-name-as-directory
 (expand-file-name "share/git-repo"
                   (getenv "GUIX_ENVIRONMENT")))
#+end_src

#+RESULTS: repo-lib
: /gnu/store/jgjvk91gfl2b92dafm6ww7bs8vk3y2y1-profile/share/git-repo/

#+begin_src shell :eval yes :var repo_lib=repo-lib
echo $repo_lib
echo $PATH
#+end_src

#+RESULTS:
| /gnu/store/jgjvk91gfl2b92dafm6ww7bs8vk3y2y1-profile/share/git-repo/                                                |
| /gnu/store/n4llg8g2kfv1f6zyk9anm02wjh648rvi-profile/bin:/gnu/store/n4llg8g2kfv1f6zyk9anm02wjh648rvi-profile/sbin:/flatpak/matlab/R2022a/bin:/home/dc/.config/guix/current/bin:/home/dc/.guix-extra-profiles/academic/academic/bin:/home/dc/.guix-extra-profiles/arch-pwsafe/arch-pwsafe/bin:/home/dc/.local/bin:/home/dc/.bin:/home/dc/.guix-profile/bin:/home/dc/.config/guix/current/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/lib/jvm/default/bin:/opt/rocm-5.4.3/bin:/opt/rocm-5.4.3/hip/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/gnu/store/0c1yfbxyv877mlgychfgvmk5ha2jqh52-gzip-1.10/bin:/gnu/store/8fpk2cja3f07xls48jfnpgrzrljpqivr-coreutils-8.32/bin |

#+begin_example org
#+begin_src shell :tangle util/test_env.sh :var repo_lib=repo-lib :results output :exports both
$repo_lib
#+end_src
#+end_example


#+begin_example org
#+begin_src shell :tangle .env
export PYTHONPATH=$GUIX_ENVIRONMENT/share/git-repo/${PYTHONPATH:+:}$PYTHONPATH
#+end_src
#+end_example

#+RESULTS:

** Python Scripts

#+begin_src shell :results output
python -c "import sys; print(sys.path)"
echo $GUIX_ENVIRONMENT
#+end_src

#+RESULTS:
: ['', '/usr/lib/python310.zip', '/usr/lib/python3.10', '/usr/lib/python3.10/lib-dynload', '/home/dc/.local/lib/python3.10/site-packages', '/data/lang/bpy/src/blender-notebook', '/usr/lib/python3.10/site-packages']
: /gnu/store/n4llg8g2kfv1f6zyk9anm02wjh648rvi-profile

+ =:python (expand-file-name "bin/python3" (getenv "GUIX_ENVIRONMENT"))=
  - this gives the GUIX_ENVIRONMENT used to start emacs

#+begin_src python :results value :exports none :python python3
import sys
import os
# return __file__

# sys.path is incorrect
# return sys.path

# path is correct
# return os.environ

# return sys.path

# manifest_xml won't import
# import manifest_xml

#+end_src

* Git
