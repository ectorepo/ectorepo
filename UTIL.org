#+TITLE:     Ectorepo: support
#+AUTHOR:    David Conner
#+EMAIL:     noreply@te.xel.io
#+DESCRIPTION: notes
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh     :tangle-mode (identity #o555) :mkdirp yes
#+PROPERTY: header-args:python :tangle-mode (identity #o644) :mkdirp yes
#+PROPERTY: header-args:conf   :tangle-mode (identity #o444) :mkdirp yes
#+property: header-args:scheme :tangle-mode (identity #o644) :mkdirp yes

#+begin_src emacs-lisp :eval no :exports none :results none
;; Eval with C-x C-e to disable eval confirmation in this buffer
;; ... or set :eval yes
(setq-local org-confirm-babel-evaluate nil)
#+end_src

* Repo Tools

** Manifest

Guix environment in =manifest.scm= must be loaded by =buffer-env.el= for tangling to work.

#+begin_src scheme :tangle manifest.scm :eval no
(use-modules (guix packages)
             (gnu packages android)
             (gnu packages python))

(let ((git-repo-with-path
       (manifest-entry
         (name "git-repo")
         (item git-repo)
         (version "2.4.1") ;most recent version
         (search-paths (list (search-path-specification
                              (variable "PYTHONPATH")
                              (files '("share/git-repo")))
                             (search-path-specification
                              (variable "GUIX_PYTHONPATH")
                              (files '("share/git-repo"))))))))

 (concatenate-manifests (list
                         (manifest
                          (list git-repo-with-path))
                          (packages->manifest
                           (list python)))))
#+end_src

*** Package Transformations

See =options->transformations= for info about [[https://guix.gnu.org/manual/en/html_node/Defining-Package-Variants.html][package variants]].

#+begin_example scheme
(package
  (name "hello-simd")
  ;; ...

  ;; This package may benefit from SIMD extensions so
  ;; mark it as "tunable".
  (properties '((tunable? . #t))))
#+end_example

+ =(tunable ...)=
+ =(with-source "/file/or/url.tar.gz")=
+ or =(with-input...)=
+ or =(with-graft...)=

The last of these enables hacking on source checkouts. To use it with
=git-repo=, create a new package that inherits from the intended package and
replace the =(source...)= declaration with a reference to the project's path in
the sync'd repo superproject. There may be a be a better way to do this: =guix
build --help-transform=.

** Environment

When running the scripts, prefix them with =guix shell -m manifest.scm -- python
$script=. This is the most consistent way to do this in emacs.

The =buffer-env= package will load the correct environment when commands via
=[C-u] M-!=, but trying to get this to work with =org-babel= requires too much
init.el-specific configuration or unsatisfactory boilerplate. This is mainly an
org-babel problem.

For example, the org-babel header =:python (expand-file-name "bin/python3"
(getenv "GUIX_ENVIRONMENT"))= will give the =GUIX_ENVIRONMENT= used to start
emacs. Other ways to addess include =.env= scripts, which aren't necessarily
portable.

** Python Scripts

When provided the above manifest, a vanilla =buffer-env= configuration, permits
hacking on the python scripts using commands like:

+ C-c C-p :: run-python
+ C-c C-c :: python-shell-send-buffer

Repo's =XmlManifest= class requires a =repodir= and =manifest_file= path. for
these scripts below, I assume that the script is running from =$_REPO= and that
the manifests are sync'd into =$_ECTO/$project=.

*** Merge Manifests

#+begin_src shell
guix shell -m manifest.scm -- python util/merge_manifests.py
#+end_src

#+RESULTS:

#+begin_src python :tangle util/merge_manifests.py  :tangle-mode (identity #o744) :mkdirp yes
import sys
import os
import glob
from os.path import join

#import manifest_xml
from manifest_xml import *
#from manifest_xml import GitcManifest
#from manifest_xml import XmlManifest, GitcManifest, GitcClient
#from manifest_xml import GitcManifest, RepoClient

ecto_dir = os.environ["_ECTO"]
repo_dir = os.environ["_REPO"]
template = join(repo_dir, "_remotes.xml")

remotes_xml_files = glob.glob("*/_remotes.xml")
repo_names = list(map(lambda p: p.split("/")[0], remotes_xml_files))
ecto_paths = list(map(lambda n: "/".join([ecto_dir,n]), repo_names))

#ecto_manifests = list(map(lambda i: GitcManifest(ecto_paths[i], remotes_xml_files[i]),
#                          range(len(remotes_xml_files))))
ecto_manifests = list(map(lambda i: RepoClient(ecto_paths[i], remotes_xml_files[i]),
                          range(len(remotes_xml_files))))

#print(ecto_manifests[0].remotes)
#repo_remote_xml = GitcManifest(".", "_remotes.xml")
#print(repo_remote_xml.remotes)
print(template)
#+end_src

#+RESULTS:

#+begin_example python

# def output_manifest(file):

# assume that the immediate subdirectories of dir may contain _remotes.xml
# collect these files into a list

# def consolidate_remotes(dir):
# os.walk

print(os.path)
print(__file__)

def main(orig_args):
    print("orig_args:",orig_args)

if __name__ == '__main__':
  main(sys.argv[1:])

#+end_example

* Git
