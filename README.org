#+TITLE: Metarepo Notes
#+AUTHOR: David Conner
#+DESCRIPTION:
#+PROPERTY:
#+STARTUP: content
#+OPTIONS: toc:nil



- abo-abo/oremacs
- geolessel/dotfiles
- purcell/emacs.d
- tuhdo/emacs-c-ide-demo
- karthink/.emacs.d
- hsinhaoyu/.emacs.d
- blejdfist/dotfiles
- dwt1/dotfiles/
- HaoZeke/dotdoom
- HaoZeke/Dotfiles
- Brettm12345/doom-emacs-literate-config
- xahlee/xahscripts
- mwfogleman/.emacs.d
- tammymakesthings/emacs_d
- lccambiaghi/.doom.d
- ubolonton/dotfiles
- ubolonton/.emacs.d
- aborn/dotfiles
- hlissner/dotfiles
- protesilaos/dotfiles.git
- aborn/.spacemacs.d
- zzamboni/dot-doom
- magnars/.emacs.d
- lccambiaghi/vanilla-emacs
- sunnyhasija/Academic-Doom-Emacs-Config
- xahlee/xah_emacs_init
- daviwil/dotfiles
- bbatsov/emacs.d
- zamansky/dot-emacs
- hlissner/doom-emacs-private
- daedreth/UncleDavesEmacs
- joseph8th/literatemacs
- rasendubi/dotfiles
- bbatsov/prelude
- TimQuelch/emacs.d
- frap/emacs-literate


* Meta Repo

This is a git repo full of submodules to Repo projects made of git repos. The
capital R in Repo matters.

using google's repo's tool

- [[https://www.instructables.com/Using-Googles-repo-command-in-your-own-projects/][how to set up in other new projects]]
- sel4 systems: [[https://docs.sel4.systems/projects/buildsystem/repo-cheatsheet.html][Google Repo cheatsheet]]]

*** TODO read in value for local repository from =dir-locals.el=

** Making new submodule Repo projects_

Create a =repos.txt= or tangle one with a babel block.

#+begin_src shell :tangle :results value

find $__META_REPO_HOME -type f -wholename "*.git/config" -exec cat \{\} + | grep "url = " | sed -e "s/.*url = //"

# Or something like this
# find /data/dev/x.files/ -wholename "*/.git/config" -type f -exec cat \{\} + | grep -e "url = " | cut -f2 -d '='

#+end_src

#+RESULTS:
: 0


Use it as input for a buffer or variable. If you created a variable for babel,
use it as input for another babel block or use =M-!= to feed the selected lines
from a buffer to a shell script that runs something like:

- [[https://www.instructables.com/Using-Googles-repo-command-in-your-own-projects/][how to set up in other new projects]]

** Main Question (before doing this)

+ can many =*.xml= files share a repo when they do not produce a common manifest?
  - if so, it's possible to create a repo with a bunch of these manifests and serve them into repos...
    - which would need to be branches or workgroups.
    - so probably not, but the Chromium/Android projects are huge (each easily 15+ gb if not careful with =repo=)

*** Some concepts:
- the manifests are mostly meant to exist remotely (to config groups of builds/repos or etc). it would seem that they are also meant to mostly be managed remotely (esp. at google)
- there is an alternative tool whose design is based on repo, but which doesn't force you to store a manifest in a separate repo ... but it would seem that manifest/s/ must exist in their own repo.
  - whether you can pull off hosting a dozen of them in one repo remains
    unclear. certainly this was not the intent of Google
  - you can =<include name=fdsa.xml/>= in xml files to split out remotes, but this is intended to produce mostly one main =xml= file (which other devs may expect to layer changes onto; branches/groups/etc)
    - repo branching would make multiple =xml manifests= in a single "repo
      repo" problematic. (branching could theoretically be used to provide this feature of multiple XML's in one reporepo .... but that's insane)
  - so it looks like the guy who wrote the alternative repo tool is correct: it don't do that (which isn't that big of a deal)

*** Some caveats:
  - The =./repo= folder is meant the only of it's kind (afaik?) at the root of a repo project.
  - symlinks in paths have a quite a few rules in them.

** [[https://github.com/canatella/repo-el/blob/master/repo.el][Repo]] (google tool, [[https://github.com/GerritCodeReview/git-repo][github mirror]])

+ Install =sudo pacman -Syu repo=

*** Repo setup
+ =default.xml= [[https://gerrit.googlesource.com/git-repo/+/HEAD/docs/manifest-format.md][manifest format]] documentation
  - see info on local manifests (these inherit many properties)
+ [[https://gerrit.googlesource.com/git-repo/+/HEAD/docs/repo-hooks.md][repo hooks]] documentation
+ [[https://en.wikibooks.org/wiki/Git/Submodules_and_Superprojects][git superprojects]] documentation
+ Android docs
  - [[https://source.android.com/setup/develop/repo][Repo Command Reference]]
  - [[https://source.android.com/setup/develop/repo][Source Control Tools]]
  - [[https://source.android.com/setup/create/coding-tasks][Source Control Workflow]]

*** Emacs Integration: [[https://github.com/canatella/repo-el][repo-el]]

*** System Setup
Ideally, for all reference projects, i would like one =/data/dev/metarpo=
project that contains all the metadata, while the actual contents of these are
spread out into various =/data/dev= directories

- that makes it easier to reason about to configure IDE's and tools

**** TODO decide on local manifests
+ these /could/ be stored in local metarepos (but inherit too much?)
**** TODO decide on root manifest

*** Metarepos
+ Meta Repo =/data/dev/metarepo=
+ Meta =/data/dev/meta= (this could maybe simply reside in =/data/org=)
+ Emacs =/data/dev/emacs=
+ .Emacs =/data/dev/x.files= (or .files)
+ Clojure =/data/dev/clojure=
+ Julia =/data/dev/julia=
+ KDE =/data/dev/kde=
+ Krita =/data/dev/krita=
+ Garuda =/data/dev/garuda=
+ ABS =/data/dev/abs=
+ Nvidia =/data/dev/nvidia=

* [[https://github.com/mateodelnorte/meta][Meta]] (node cmd & makefile approach)

*** Meta/Loop installation

**** Meta Plugins
+ group
+ docker
+ git
+ template

*** Emacs integration

**** Basic

**** Advanced
+ emacs package to provide ibuffer/dired/buffler-like interface to allow meta
  repos/groups to be easily marked for meta/loop operations.

**** Questions:
+ autodiscovery?
  - flat directory structure only?
  - tree structure permitted?
+ existing tooling? packages?
+ org integration? (primarily workflow)
  - look at existing emacs-lisp packages that use org headers/lists as input for
    other operations
+ Document the intended workflow

**** Ideas
+ use org to document the global structure of metaproject containers?
  - preferably so that these projects could be recreated easily

*** System Setup

Each metarepo must be a git repository

*** TODO find out whether nested tree structures are allowed
*** TODO find out how =meta= integrates with =loop=

*** Metarepo Groups

** Alternative Tools

*** [[https://github.com/genius-systems/gameta][Gameta]] (python)
*** [[https://github.com/blejdfist/git-metarepo][git-metarepo]]
*** [[0    Link: https://gerrit.googlesource.com/git-repo/][repo]] (google)
*** murepo



* TODO Process Old Readme (Language/Topic Metaprojects) :meta:

These should include:

** A file system path, relative to some global ~$DEV_HOME~ path

** Supporting scripts for automating project checkout/sync
*** this could either be similar to git-modules or git modules itself ... though that's entirely too much work for this.
**** I just want lists of dumb, cloned repos that can be easily pulled if needed (and if their tree isn't in a dirty state)
**** (github: you should probably make a "playlists" feature for git repos, where groups of repos can be checked out together, but which are meant to be used for reference only)
***** ... unless there is some better way of doing that already
*** some would be global (i.e. ~sync-cloned-repos~)
*** some would be per-language or per-topic

** These supporting scripts could be written with ~org-babel~ and with the ~tangle~ exports being written to hardlinked locations in both ~./_notes/~ and ~$LANG_HOME~

** _Notes_ Metaprojects

These contain dotfiles/etc. For programming languages, symlinks can link back to ~/data/dev/_notes~ these docs to their

*** TODO create initial symlinks for: julia, clojure, CAD
*** TODO migrate /some/ existing notes to ~org~ using [[https://pandoc.org/installing.html][pandoc]]
*** TODO address problem where whitelisting files in gitignore doesn't work

** Mu Repo

Tool and approach to clone/sync repos in a language sub/folder. For now, i've
settled on [[https://fabioz.github.io/mu-repo/][mu-repo]] and i'll potentially revert to mixu/gr or autogit. I would
like this to be scriptable and regeneratable (with minimal effort)

To install =mu-repo=:

#+begin_src shell :tangle no
sudo pacman -Syu python-pip
pip install mu-repo
#+end_src

Basic =mu-repo= usage:

#+begin_src shell :tangle no
mu register --recursive # recursively register all repos
mu register --current # register with depth 1

#+end_src

To create for new metaprojects, do the following, more or less. For mu-repo to
reclone all the projects, you must configure some path-dependent rules so that
the correct =mu-repo.remote-base-url= config key is available. To retrieve this
config key from within the containing metaproject root directory, you must init
a blank repository anyways (otherwise, git will not retrieve commit keys). You
could take [[https://www.freecodecamp.org/news/how-to-handle-multiple-git-configurations-in-one-machine/][this approach]] and have git deep-merge a partial
~.gitconfig-metaproject~ config into your ~$HOME/.gitconfig~, which requires
relevent configuration being placed in two places (i.e. lines changed in
~$HOME/.gitconfig~ and the merged gitconfig in the metaproject). But, you must
create a blank repo anyways for =mu-repo= to access its config keys... so it's
best to alter the ~$METAPROJECT/.git/config~ ... which needs not be in git.
Other features of mu-repo also benefit from an arbitrary blank-repo at the
metaproject root. ~<le-sigh>~

#+begin_src

#+end_src

#+begin_src shell :tangle no
# USE RELATIVE PATHS


META_PROJECT=/data/dev/nvidia
META_GROUP1=src-nvidia
META_GROUP2=src-khronos

cd $META_PROJECT
mkdir $META_GROUP1 $META_GROUP2
git init

#+end_src

*** TODO describe setting up groups :murepo:



*** TODO standardize a format for listing repos to clone for a language like clojure/julia/etc or use the following (preferred at top)
+ [[https://github.com/pazdera/gitwalk][pazdera/gitwalk]] (popular, allows groups defined via JSON, best so far)
+ [[https://github.com/mixu/gr][mixu/gr]] (another promising bulk management tool)
  + similar to my old gitar scripts
  + auto-discover local git repos, attach tags and manage as lists
+ [[https://github.com/asottile/all-repos][asottile/all-repos]] (interesting)
+ [[https://github.com/naddeoa/git-bulk][naddeoa/git-bulk]] (also probably helpful)
+ [[https://github.com/fabiospampinato/autogit][fabiospampinato/autogit]] (most popular, but aimed towards personal/org repo management)
+ [[https://github.com/scivision/pygit-bulk][scivision/pygit-bulk]] and [[https://pypi.org/project/gitutils/][GitMC]]
+ [[https://gist.github.com/Lukas238/8d9abbeabfcd7225e3a254d40eb0c080][Bulk backup/clone of Git Repos From A List]]
+ [[https://github.com/taylorjayoung/RepoSweeper][RepoSweeper]] (for deleting/managing Github repos)
*** TODO emacs workflow: automation of structure for projects/org/code
+ outline basic structure for capture/refile
  + manage org files, repo groups and/or metadata
  + types of projects (reference groups, work, notes, etc)
+ automation for adding to gitwalk JSON groups (of repos for reference)
  + when is it helpful to use these groups? when is it definitely overkill (i.e. much of the code i'm interested in should be easy to navigate to from a project... however, for now, i'm in unfamiliar territory with no clear way to expect which dependencies are going to exist in any project. i'm trying to avoid bad habits like googling code samples)
+ outline
