#+TITLE:     Ectorepo: Linux Perf
#+AUTHOR:    David Conner
#+EMAIL:     aionfork@gmail.com
#+DESCRIPTION: notes
#+PROPERTY: header-args :comments none


#+begin_src xml :tangle basics.xml
<project path="" name="" />
#+end_src


* Resources

+ github: [[https://github.com/iovisor][iovisor]] perf tools
+ [[https://about.gitlab.com/blog/2019/07/24/three-new-support-tools/][strace parser]] (from gitlab)

** Tracing

+ random [[https://gist.github.com/pgrm/8932b46d7c064de8eadc855291a512f2][strace of ansible playbook]]

* Perf Tools

As a starting point, I outlined here are in [[github:brendangregg/perf-tools][brendangregg/perf-tools]] and other
projects. If the text is in here, I should be able to rework it later with
regexp/org-elements. I've got a version of the original diagram that I can't
find anywhere anymore. It lists the same repo, but I'm not sure.

The diagrams break things out

| perf   | perf-tools/bcc tracing  |
| static | static perfomance tools |
| obs    | observability tools     |

***** TODO add repos as needed

** Linux

Various

| perf   | capable                                 |
| static | sysctl /sys dmesg lshw journalctl lsmod |
| obs    | sar /proc dstat dmesg                   |

*** Applications

| perf | ugc ucalls |

**** System Libraries

| perf   | gethostlatency |
| static | ldd            |

*** System Call Interface

| perf | opensnoop statsnoop syncsnoop |
| obs  | strace perf trace sysdig      |

*** Kernel

This is broken into three sections in the diagram and their subsections loosely
correspond to the kernel subsystems.

**** Scheduler

| perf   | cpudist execsnoop runlat offcputime   |
| static | schedtool                             |
| obs    | latencytop mpstat powertop /proc/stat |

Also under Virtual Memory (MMU)

| obs | top htop ps pidstat |

All the =obs= tools here except latencytop connect to =cpu 1=

**** MMU

| perf | memleak oomkill slabratetop       |
| obs  | vmstat slaptop free /proc/meminfo |

**** Networking

| obs | netstat iptraf-ng |

***** Sockets

| obs | ss |

***** TCP/UDP

| perf | tcptop tcplife tcpconnect tcpaccept tcpconnlat tcpretrans |

***** IP

| static | ip route iptables nfptables |

***** Ethernet

| obs | tcpdump |

**** Disks

| perf | cachestat dcsnoop filetop fileslower mountsnoop |

***** VFS

| obs | lsof pcstat |

***** File Systems

| perf   | ext4slower ext4disk btrfs* xfs* zfs* |
| static | df -h                                |

***** Volume Manager

| static | mdadm lvm dmsetup |

***** Block Device Int.

| perf   | biotop biosnoop biolatency bitesize |
| static |                                     |


*** Device Drivers

| perf   | hardirqs ttysnoop |
| static | dmesg multipath   |

*** Firmware

** Hardware

*** GPU

**** Intel

| static | intel_gpu_top intel_gpu_time |
| obs    | intel_gpu_frequency          |

**** Nvidia

**** AMD

| perf   | rocprof rocprofv2                       |
| static | rocminfo rocm_agent_enumerator rocm-smi |
| obs    | roctracer                               |

***** Debugging

+ rocgdb
+ rocprofv2

***** Disassembly

The below extracting and processing instructions from =*.so ELF=. It may be
useful for tracing? I donno, but they sound cool.

+ roc-obj
+ roc-obj-ls
+ roc-obj-extract

*** CPU 1

*** DRAM

*** Fan

*** Power Supply

*** I/O Bridge

**** I/O Controller



**** Network Controller

*****

* bpftrace
